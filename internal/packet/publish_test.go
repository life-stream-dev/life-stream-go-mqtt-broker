package packet

import (
	"reflect"
	"testing"
)

func TestNewPublishPacket(t *testing.T) {
	tests := []struct {
		payloads *PublishPacketPayloads
		except   []byte
	}{
		{
			payloads: &PublishPacketPayloads{
				PacketFlag: PublishPacketFlag{
					RetryFlag: false,
					QoS:       0,
					Retain:    false,
				},
				TopicName: FieldPayload{
					PayloadLength: 3,
					Payload:       []byte("111"),
				},
				Payload: []byte{0x7b, 0x0a, 0x20, 0x20, 0x22, 0x6d, 0x73, 0x67, 0x22, 0x3a, 0x20, 0x22, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x22, 0x0a, 0x7d},
			},
			except: []byte{0x30, 0x19, 0x00, 0x03, 0x31, 0x31, 0x31, 0x7b, 0x0a, 0x20, 0x20, 0x22, 0x6d, 0x73, 0x67, 0x22, 0x3a, 0x20, 0x22, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x22, 0x0a, 0x7d},
		},
		{
			payloads: &PublishPacketPayloads{
				PacketFlag: PublishPacketFlag{
					RetryFlag: false,
					QoS:       2,
					Retain:    false,
				},
				TopicName: FieldPayload{
					PayloadLength: 3,
					Payload:       []byte("111"),
				},
				Payload:  []byte{0x7b, 0x0a, 0x20, 0x20, 0x22, 0x6d, 0x73, 0x67, 0x22, 0x3a, 0x20, 0x22, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x22, 0x0a, 0x7d},
				PacketID: 458,
			},
			except: []byte{0x34, 0x1b, 0x00, 0x03, 0x31, 0x31, 0x31, 0x01, 0xca, 0x7b, 0x0a, 0x20, 0x20, 0x22, 0x6d, 0x73, 0x67, 0x22, 0x3a, 0x20, 0x22, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x22, 0x0a, 0x7d},
		},
	}

	for _, test := range tests {
		packet := NewPublishPacket(test.payloads)
		if !reflect.DeepEqual(packet, test.except) {
			t.Errorf("NewPublishPacket() got: %v want: %v", packet, test.except)
		}
	}
}
